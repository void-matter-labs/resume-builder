/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PdfIndexImport } from './routes/pdf/index'

// Create Virtual Routes

const TechnicalSkillsIndexLazyImport = createFileRoute('/technical-skills/')()
const PersonalInfoIndexLazyImport = createFileRoute('/personal-info/')()
const ExperienceIndexLazyImport = createFileRoute('/experience/')()
const EducationIndexLazyImport = createFileRoute('/education/')()
const ContactInformationIndexLazyImport = createFileRoute(
  '/contact-information/',
)()
const CertificationIndexLazyImport = createFileRoute('/certification/')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TechnicalSkillsIndexLazyRoute = TechnicalSkillsIndexLazyImport.update({
  id: '/technical-skills/',
  path: '/technical-skills/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/technical-skills/index.lazy').then((d) => d.Route),
)

const PersonalInfoIndexLazyRoute = PersonalInfoIndexLazyImport.update({
  id: '/personal-info/',
  path: '/personal-info/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/personal-info/index.lazy').then((d) => d.Route),
)

const ExperienceIndexLazyRoute = ExperienceIndexLazyImport.update({
  id: '/experience/',
  path: '/experience/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/experience/index.lazy').then((d) => d.Route),
)

const EducationIndexLazyRoute = EducationIndexLazyImport.update({
  id: '/education/',
  path: '/education/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/education/index.lazy').then((d) => d.Route),
)

const ContactInformationIndexLazyRoute =
  ContactInformationIndexLazyImport.update({
    id: '/contact-information/',
    path: '/contact-information/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/contact-information/index.lazy').then((d) => d.Route),
  )

const CertificationIndexLazyRoute = CertificationIndexLazyImport.update({
  id: '/certification/',
  path: '/certification/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/certification/index.lazy').then((d) => d.Route),
)

const PdfIndexRoute = PdfIndexImport.update({
  id: '/pdf/',
  path: '/pdf/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/pdf/': {
      id: '/pdf/'
      path: '/pdf'
      fullPath: '/pdf'
      preLoaderRoute: typeof PdfIndexImport
      parentRoute: typeof rootRoute
    }
    '/certification/': {
      id: '/certification/'
      path: '/certification'
      fullPath: '/certification'
      preLoaderRoute: typeof CertificationIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact-information/': {
      id: '/contact-information/'
      path: '/contact-information'
      fullPath: '/contact-information'
      preLoaderRoute: typeof ContactInformationIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/education/': {
      id: '/education/'
      path: '/education'
      fullPath: '/education'
      preLoaderRoute: typeof EducationIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/experience/': {
      id: '/experience/'
      path: '/experience'
      fullPath: '/experience'
      preLoaderRoute: typeof ExperienceIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/personal-info/': {
      id: '/personal-info/'
      path: '/personal-info'
      fullPath: '/personal-info'
      preLoaderRoute: typeof PersonalInfoIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/technical-skills/': {
      id: '/technical-skills/'
      path: '/technical-skills'
      fullPath: '/technical-skills'
      preLoaderRoute: typeof TechnicalSkillsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pdf': typeof PdfIndexRoute
  '/certification': typeof CertificationIndexLazyRoute
  '/contact-information': typeof ContactInformationIndexLazyRoute
  '/education': typeof EducationIndexLazyRoute
  '/experience': typeof ExperienceIndexLazyRoute
  '/personal-info': typeof PersonalInfoIndexLazyRoute
  '/technical-skills': typeof TechnicalSkillsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pdf': typeof PdfIndexRoute
  '/certification': typeof CertificationIndexLazyRoute
  '/contact-information': typeof ContactInformationIndexLazyRoute
  '/education': typeof EducationIndexLazyRoute
  '/experience': typeof ExperienceIndexLazyRoute
  '/personal-info': typeof PersonalInfoIndexLazyRoute
  '/technical-skills': typeof TechnicalSkillsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/pdf/': typeof PdfIndexRoute
  '/certification/': typeof CertificationIndexLazyRoute
  '/contact-information/': typeof ContactInformationIndexLazyRoute
  '/education/': typeof EducationIndexLazyRoute
  '/experience/': typeof ExperienceIndexLazyRoute
  '/personal-info/': typeof PersonalInfoIndexLazyRoute
  '/technical-skills/': typeof TechnicalSkillsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pdf'
    | '/certification'
    | '/contact-information'
    | '/education'
    | '/experience'
    | '/personal-info'
    | '/technical-skills'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/pdf'
    | '/certification'
    | '/contact-information'
    | '/education'
    | '/experience'
    | '/personal-info'
    | '/technical-skills'
  id:
    | '__root__'
    | '/'
    | '/pdf/'
    | '/certification/'
    | '/contact-information/'
    | '/education/'
    | '/experience/'
    | '/personal-info/'
    | '/technical-skills/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PdfIndexRoute: typeof PdfIndexRoute
  CertificationIndexLazyRoute: typeof CertificationIndexLazyRoute
  ContactInformationIndexLazyRoute: typeof ContactInformationIndexLazyRoute
  EducationIndexLazyRoute: typeof EducationIndexLazyRoute
  ExperienceIndexLazyRoute: typeof ExperienceIndexLazyRoute
  PersonalInfoIndexLazyRoute: typeof PersonalInfoIndexLazyRoute
  TechnicalSkillsIndexLazyRoute: typeof TechnicalSkillsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PdfIndexRoute: PdfIndexRoute,
  CertificationIndexLazyRoute: CertificationIndexLazyRoute,
  ContactInformationIndexLazyRoute: ContactInformationIndexLazyRoute,
  EducationIndexLazyRoute: EducationIndexLazyRoute,
  ExperienceIndexLazyRoute: ExperienceIndexLazyRoute,
  PersonalInfoIndexLazyRoute: PersonalInfoIndexLazyRoute,
  TechnicalSkillsIndexLazyRoute: TechnicalSkillsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/pdf/",
        "/certification/",
        "/contact-information/",
        "/education/",
        "/experience/",
        "/personal-info/",
        "/technical-skills/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/pdf/": {
      "filePath": "pdf/index.tsx"
    },
    "/certification/": {
      "filePath": "certification/index.lazy.tsx"
    },
    "/contact-information/": {
      "filePath": "contact-information/index.lazy.tsx"
    },
    "/education/": {
      "filePath": "education/index.lazy.tsx"
    },
    "/experience/": {
      "filePath": "experience/index.lazy.tsx"
    },
    "/personal-info/": {
      "filePath": "personal-info/index.lazy.tsx"
    },
    "/technical-skills/": {
      "filePath": "technical-skills/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
