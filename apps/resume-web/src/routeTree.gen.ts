/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PdfIndexImport } from './routes/pdf/index'

// Create Virtual Routes

const PersonalInfoIndexLazyImport = createFileRoute('/personal-info/')()
const ExperienceIndexLazyImport = createFileRoute('/experience/')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PersonalInfoIndexLazyRoute = PersonalInfoIndexLazyImport.update({
  id: '/personal-info/',
  path: '/personal-info/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/personal-info/index.lazy').then((d) => d.Route),
)

const ExperienceIndexLazyRoute = ExperienceIndexLazyImport.update({
  id: '/experience/',
  path: '/experience/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/experience/index.lazy').then((d) => d.Route),
)

const PdfIndexRoute = PdfIndexImport.update({
  id: '/pdf/',
  path: '/pdf/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/pdf/': {
      id: '/pdf/'
      path: '/pdf'
      fullPath: '/pdf'
      preLoaderRoute: typeof PdfIndexImport
      parentRoute: typeof rootRoute
    }
    '/experience/': {
      id: '/experience/'
      path: '/experience'
      fullPath: '/experience'
      preLoaderRoute: typeof ExperienceIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/personal-info/': {
      id: '/personal-info/'
      path: '/personal-info'
      fullPath: '/personal-info'
      preLoaderRoute: typeof PersonalInfoIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pdf': typeof PdfIndexRoute
  '/experience': typeof ExperienceIndexLazyRoute
  '/personal-info': typeof PersonalInfoIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pdf': typeof PdfIndexRoute
  '/experience': typeof ExperienceIndexLazyRoute
  '/personal-info': typeof PersonalInfoIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/pdf/': typeof PdfIndexRoute
  '/experience/': typeof ExperienceIndexLazyRoute
  '/personal-info/': typeof PersonalInfoIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/pdf' | '/experience' | '/personal-info'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/pdf' | '/experience' | '/personal-info'
  id: '__root__' | '/' | '/pdf/' | '/experience/' | '/personal-info/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PdfIndexRoute: typeof PdfIndexRoute
  ExperienceIndexLazyRoute: typeof ExperienceIndexLazyRoute
  PersonalInfoIndexLazyRoute: typeof PersonalInfoIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PdfIndexRoute: PdfIndexRoute,
  ExperienceIndexLazyRoute: ExperienceIndexLazyRoute,
  PersonalInfoIndexLazyRoute: PersonalInfoIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/pdf/",
        "/experience/",
        "/personal-info/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/pdf/": {
      "filePath": "pdf/index.tsx"
    },
    "/experience/": {
      "filePath": "experience/index.lazy.tsx"
    },
    "/personal-info/": {
      "filePath": "personal-info/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
